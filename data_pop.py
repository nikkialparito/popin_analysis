# -*- coding: utf-8 -*-
"""PopIn Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ILY7IN2HkbYOBM2FWh49uSLTO9MDmBPY
"""

!pip install streamlit
!pip install pyngrok

# Import libraries
import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px

df = pd.read_csv('MeetUp_PopIn_Events.csv')
df

# Commented out IPython magic to ensure Python compatibility.
# %%writefile streamlit_app.py
# import streamlit as st
# import pandas as pd
# import altair as alt
# import plotly.express as px
# 
# st.set_page_config(
#     page_title="PopIn Events Dashboard",
#     page_icon="ðŸ“…",
#     layout="wide",
#     initial_sidebar_state="expanded")
# 
# alt.themes.enable("dark")
# 
# df_reshaped = pd.read_csv('/mnt/data/MeetUp_PopIn_Events.csv')
# 
# df_reshaped['Date & Time'] = pd.to_datetime(df_reshaped['Date & Time'])
# df_reshaped['Year'] = df_reshaped['Date & Time'].dt.year
# 
# df_reshaped.dropna(subset=['Attendees'], inplace=True)
# 
# with st.sidebar:
#     st.title('ðŸ“… PopIn Events Dashboard')
#     release_year = list(df_reshaped.Year.unique())[::-1]
#     release_year = st.selectbox('Select a year', release_year, index=len(release_year)-1)
#     df_release_year = df_reshaped[df_reshaped.Year == release_year]
#     df_release_year_sorted = df_release_year.sort_values(by="Year", ascending=False)
# 
#     color_theme_list = ['blues', 'cividis', 'greens', 'inferno', 'magma', 'plasma', 'reds', 'rainbow', 'turbo', 'viridis']
#     selected_color_theme = st.selectbox('Select a color theme', color_theme_list)
# 
# def make_heatmap(input_df, input_y, input_x, input_color, input_color_theme):
#     heatmap = alt.Chart(input_df).mark_rect().encode(
#             y=alt.Y(f'{input_y}:O', axis=alt.Axis(title="Year", titleFontSize=18, titlePadding=15, titleFontWeight=900, labelAngle=0)),
#             x=alt.X(f'{input_x}:O', axis=alt.Axis(title="", titleFontSize=18, titlePadding=15, titleFontWeight=900)),
#             color=alt.Color(f'max({input_color}):Q',
#                              legend=None,
#                              scale=alt.Scale(scheme=input_color_theme)),
#             stroke=alt.value('black'),
#             strokeWidth=alt.value(0.25),
#         ).properties(width=900
#         ).configure_axis(
#         labelFontSize=12,
#         titleFontSize=12
#         )
#     return heatmap
# 
# def make_choropleth(input_df, input_id, input_column, input_color_theme):
#     choropleth = px.choropleth(input_df, locations=input_id, color=input_column, locationmode="country names",
#                                color_continuous_scale=input_color_theme,
#                                range_color=(0, max(input_df[input_column].dropna())),
#                                scope="world",
#                                labels={input_column: 'Number of Events'}
#                               )
#     choropleth.update_layout(
#         template='plotly_dark',
#         plot_bgcolor='rgba(0, 0, 0, 0)',
#         paper_bgcolor='rgba(0, 0, 0, 0)',
#         margin=dict(l=0, r=0, t=0, b=0),
#         height=350
#     )
#     return choropleth
# 
# def calculate_event_difference(input_df, input_year):
#     selected_year_data = input_df[input_df['Year'] == input_year].groupby('Location').size().reset_index(name='event_count')
#     previous_year_data = input_df[input_df['Year'] == input_year - 1].groupby('Location').size().reset_index(name='event_count')
#     merged_data = pd.merge(selected_year_data, previous_year_data, on='Location', how='left', suffixes=('_current', '_previous'))
#     merged_data['event_difference'] = merged_data['event_count_current'].sub(merged_data['event_count_previous'], fill_value=0)
#     return merged_data.sort_values(by="event_difference", ascending=False)
# 
# st.markdown('#### Gains/Losses')
# df_event_difference_sorted = calculate_event_difference(df_reshaped, release_year)
# 
# if not df_event_difference_sorted.empty:
#     top_location = df_event_difference_sorted.iloc[0]
#     st.metric(label=top_location['Location'], value=top_location['event_count_current'], delta=top_location['event_difference'])
#     bottom_location = df_event_difference_sorted.iloc[-1]
#     st.metric(label=bottom_location['Location'], value=bottom_location['event_count_current'], delta=bottom_location['event_difference'])
# 
# st.markdown('#### Total Events')
# choropleth = make_choropleth(df_reshaped, 'Location', 'Attendees', 'plasma')
# st.plotly_chart(choropleth, use_container_width=True)
# 
# heatmap_data = df_reshaped.groupby(['Year', 'Location']).size().reset_index(name='event_count')
# heatmap = make_heatmap(heatmap_data, 'Year', 'Location', 'event_count', 'plasma')
# st.altair_chart(heatmap, use_container_width=True)
#

!streamlit run streamlit_app.py &>/dev/null &

!ngrok authtoken 2sbhzmMrnAYf8oLLhxH2dS4xjWP_22g48Z2zX4pScYfuKVTfV

from pyngrok import ngrok

# Open a tunnel explicitly for HTTP
public_url = ngrok.connect("8501", "http")
print(f"Public URL: {public_url}")
