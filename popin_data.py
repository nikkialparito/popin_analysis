# -*- coding: utf-8 -*-
"""PopIn Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ILY7IN2HkbYOBM2FWh49uSLTO9MDmBPY
"""

!pip install streamlit
!pip install pyngrok

# Import libraries
import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px

df = pd.read_csv('MeetUp_PopIn_Events.csv')
df

# Commented out IPython magic to ensure Python compatibility.
# %%writefile streamlit_app.py
# import streamlit as st
# import pandas as pd
# import altair as alt
# import plotly.express as px
# 
# # Set up the dashboard layout
# st.set_page_config(
#     page_title="PopIn Events Dashboard",
#     page_icon="üé≠",
#     layout="wide"
# )
# 
# st.title("üé≠ PopIn Events Dashboard")
# st.write("üìä An interactive dashboard analyzing PopIn event trends.")
# 
# # Load dataset
# @st.cache_data
# def load_data():
#     df = pd.read_csv("MeetUp_PopIn_Events.csv")  # Ensure this file is uploaded
#     return df
# 
# df = load_data()
# 
# # **Cleaning Data**
# df.fillna({"Attendees": 0, "Category": "Unknown", "Location": "Unknown"}, inplace=True)
# df["Attendees"] = df["Attendees"].astype(int)
# 
# # üé® **Color Theme Selection**
# color_theme_list = ['blues', 'cividis', 'greens', 'inferno', 'magma', 'plasma', 'reds', 'rainbow', 'turbo', 'viridis']
# selected_color_theme = st.selectbox("üé® Select a Color Theme", color_theme_list, index=0)
# 
# # üìä **1. Bar Graph for Event Categories**
# category_counts = df["Category"].value_counts().reset_index()
# category_counts.columns = ["Category", "Count"]
# 
# bar_event_category = alt.Chart(category_counts).mark_bar().encode(
#     x=alt.X("Category:N", title="Event Category"),
#     y=alt.Y("Count:Q", title="Count"),
#     color=alt.Color("Category:N", scale=alt.Scale(scheme="category10")),
#     tooltip=["Category", "Count"]
# ).properties(
#     title="Events by Category",
#     width=350,
#     height=350
# )
# 
# # üìä **2. Bar Graph for Top 10 Events with Most Attendees**
# top_events = df.sort_values(by="Attendees", ascending=False).head(10)
# 
# bar_top_events = alt.Chart(top_events).mark_bar().encode(
#     x=alt.X("Event Name:N", title="Event Name", sort="-y"),
#     y=alt.Y("Attendees:Q", title="Number of Attendees"),
#     color=alt.Color("Event Name:N", scale=alt.Scale(scheme="category10")),
#     tooltip=["Event Name", "Attendees"]
# ).properties(
#     title="Top 10 Events with Most Attendees",
#     width=350,
#     height=350
# )
# 
# # üåç **3. Choropleth Map for Events by Location**
# location_counts = df["Location"].value_counts().reset_index()
# location_counts.columns = ["Location", "Count"]
# 
# choropleth = px.choropleth(
#     location_counts,
#     locations="Location",
#     locationmode="country names",
#     color="Count",
#     color_continuous_scale=selected_color_theme,
#     labels={"Count": "Number of Events"},
#     title="Events by Location"
# )
# choropleth.update_layout(margin=dict(l=0, r=0, t=30, b=0), height=350)
# 
# # **üé® Organizing Layout (3 Columns x 1 Row)**
# col1, col2, col3 = st.columns(3)
# 
# with col1:
#     st.altair_chart(bar_event_category, use_container_width=True)
# 
# with col2:
#     st.altair_chart(bar_top_events, use_container_width=True)
# 
# with col3:
#     st.plotly_chart(choropleth, use_container_width=True)
#

!streamlit run streamlit_app.py &>/dev/null &

import subprocess
import streamlit as st

# Replace with your actual Ngrok token
NGROK_AUTH_TOKEN = "2sbhzmMrnAYf8oLLhxH2dS4xjWP_22g48Z2zX4pScYfuKVTfV"

# Run Ngrok command
def start_ngrok():
    command = ["ngrok", "authtoken", NGROK_AUTH_TOKEN]
    result = subprocess.run(command, capture_output=True, text=True)

    if result.returncode == 0:
        st.success("‚úÖ Ngrok authentication successful!")
    else:
        st.error(f"‚ùå Ngrok authentication failed: {result.stderr}")

# Streamlit UI Button
if st.button("Authenticate Ngrok"):
    start_ngrok()


from pyngrok import ngrok

# Open a tunnel explicitly for HTTP
public_url = ngrok.connect("8501", "http")
print(f"Public URL: {public_url}")
